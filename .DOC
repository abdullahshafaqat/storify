const express = require('express');
const dotenv = require('dotenv');
const userRoutes = require('./routes/user.routes');
const connectToDB = require('./config/db');


dotenv.config();

const app = express();
connectToDB();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.set('view engine', 'ejs');
app.use('/user', userRoutes);
app.listen(3000, () => {
    console.log(`Server is running on port 3000 ${PORT}`);
});

// USERroutes
const express = require('express');
const router = express.Router();
const userModel = require('../models/user.model');
const { body, validationResult } = require('express-validator');
 
router.get('/register', (req, res) => {
    res.render('register');
});

router.post('register', 
    body('username').trim().isEmail().isLength({min:10}),
    body('email').trim().isEmail().isLength({min:15}),
    body('password').trim().isLength({min:6}),
    (req, res) => {
    const errors = validationResult(req);
    if(!errors.isEmpty()){
        return res.status(400).json({
            errors: errors.array(),
            message: "Invalid data"
        })
    }
      const {username, email, password} = req.body;
      const newUser = userModel.create({
        username,
        email,
        password
      })
      res.json(newUser);
    })
module.exports = router;







































router.get('/login',(req,res) =>{
    res.render('login')
    })
    router.post('/login',[
        body('username').trim().isLength({min:3}).withMessage('Username must be at least 3 characters'),
        body('password').trim().isLength({min:6}).withMessage('Password must be at least 6 characters')
    ],async(req,res) =>{
        const errors = validationResult(req);
        if(!errors.isEmpty()){
            return res.status(400).json({
                errors: errors.array(),
                message: "Invalid data"
            });
        }
        const {username,password} = req.body;
        
        const user = await userModel.findOne({username: username});
        if(!user){
            return res.status(400).json({
                message: "Invalid username or password"
            });
         }
         
       const isMatch = await bcrypt.compare(password,newuser.password);
       if(!isMatch){
        return res.status(400).json({
            message: "Invalid username or password"
        })
        }
        const token = jwt.sign({
            userId: newuser._id,
            username: newuser.username,
            email: newuser.email
        },process.env.JWT_SECRET,
    )
    res.json({
        token
    })
            
        })
    module.exports = router;
    





































































     
router.get('/register', (req, res) => {
    res.render('register');
});

router.post('/register', [
    body('username').trim().isLength({min:3}).withMessage('Username must be at least 3 characters'),
    
    body('email').trim().isEmail().withMessage('Must provide a valid email')
        .isLength({min:5}).withMessage('Email must be at least 5 characters'),
    
    body('password').trim().isLength({min:6}).withMessage('Password must be at least 6 characters')
], async (req, res) => {
    const errors = validationResult(req);
    if(!errors.isEmpty()){
        return res.status(400).json({
            errors: errors.array(),
            message: "Invalid data"
        });
    }
    
    try {
        const {username, email, password} = req.body;
        const hashPassword = await bcrypt.hash(password, 10);
        
        const newUser = await userModel.create({
            username,
            email,
            password: hashPassword
        });
        
        res.status(201).json({
            user: {
                username: newUser.username,
                email: newUser.email,
                password: hashPassword,
                id: newUser._id,
                __v: newUser.__v,
                
            }
        });
    } catch (error) {
        console.error("Error creating user:", error);
        res.status(500).json({
            success: false,
            message: "Error registering user",
            error: error.message
        });
    }
});
